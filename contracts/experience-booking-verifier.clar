;; Experience Booking Verifier
(define-constant contract-owner tx-sender)
(define-constant err-not-found (err u101))
(define-constant err-unauthorized (err u102))
(define-data-var experience-nonce uint u0)
(define-data-var booking-nonce uint u0)
(define-map experiences { exp-id: uint } { guide: principal, title: (string-ascii 100), price: uint, location: (string-ascii 100), verified: bool, active: bool, created-at: uint })
(define-map guides { guide: principal } { verified: bool, rating: uint, total-bookings: uint })
(define-map bookings { booking-id: uint } { exp-id: uint, traveler: principal, date: uint, status: (string-ascii 20), payment: uint, created-at: uint })
(define-read-only (get-experience (exp-id uint)) (map-get? experiences { exp-id: exp-id }))
(define-read-only (get-guide (guide principal)) (map-get? guides { guide: guide }))
(define-read-only (get-booking (booking-id uint)) (map-get? bookings { booking-id: booking-id }))
(define-public (register-guide) (begin (map-set guides { guide: tx-sender } { verified: false, rating: u0, total-bookings: u0 }) (ok true)))
(define-public (verify-guide (guide principal)) (begin (asserts! (is-eq tx-sender contract-owner) err-unauthorized) (map-set guides { guide: guide } (merge (unwrap! (get-guide guide) err-not-found) { verified: true })) (ok true)))
(define-public (create-experience (title (string-ascii 100)) (price uint) (location (string-ascii 100))) (let ((new-id (+ (var-get experience-nonce) u1)) (guide-data (unwrap! (get-guide tx-sender) err-not-found))) (asserts! (get verified guide-data) err-unauthorized) (map-set experiences { exp-id: new-id } { guide: tx-sender, title: title, price: price, location: location, verified: true, active: true, created-at: block-height }) (var-set experience-nonce new-id) (ok new-id)))
(define-public (create-booking (exp-id uint) (date uint)) (let ((new-id (+ (var-get booking-nonce) u1)) (exp (unwrap! (get-experience exp-id) err-not-found))) (asserts! (get active exp) err-unauthorized) (map-set bookings { booking-id: new-id } { exp-id: exp-id, traveler: tx-sender, date: date, status: "confirmed", payment: (get price exp), created-at: block-height }) (map-set guides { guide: (get guide exp) } (merge (unwrap! (get-guide (get guide exp)) err-not-found) { total-bookings: (+ (get total-bookings (unwrap! (get-guide (get guide exp)) err-not-found)) u1) })) (var-set booking-nonce new-id) (ok new-id)))
(define-public (complete-booking (booking-id uint)) (let ((booking (unwrap! (get-booking booking-id) err-not-found))) (asserts! (is-eq tx-sender (get traveler booking)) err-unauthorized) (map-set bookings { booking-id: booking-id } (merge booking { status: "completed" })) (ok true)))
(define-public (rate-guide (guide principal) (rating uint)) (begin (asserts! (<= rating u100) err-unauthorized) (map-set guides { guide: guide } (merge (unwrap! (get-guide guide) err-not-found) { rating: rating })) (ok true)))
